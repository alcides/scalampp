<?xml version="1.0"?>
<!-- Created by: Alcides Fonseca -->

<project name="sd" default="compile" basedir=".">

  <property name="user.name"		 value="Alcides Fonseca"/>	
  <property name="project.name"      value="sd"/>	
  <property name="project.version"   value="0.1.0"/>	

  <property name="scala.home"        value="/opt/local/share/scala/"/>	
  <property name="server.class"        value="BootServer"/>	
  <property name="client.class"        value="BootClient"/>	
  <property name="ns.class"        value="BootNS"/>	
	
  <property name="src.dir"           value="./src"/>
  <property name="build.dir"         value="./build"/>
  <property name="dist.dir"          value="./dist"/>
  <property name="docs.dir"          value="./documentation"/>
  <property name="lib.dir"    		 value="./lib"/>
  <property name="db.dir"           value="./db"/>

  <property name="src.includes"      value="**/*.scala"/>
  <property name="src.includes-java"      value="**/*.java"/>	
  <property name="src.excludes"      value="**/*.class"/>	

  <property name="sqlite.jar" value="./lib/sqlitejdbc.jar"/>
  <property name="scala-library.jar" value="${scala.home}/lib/scala-library.jar"/>

  <path id="library.classpath">
  	<pathelement location="${scala.home}/lib/scala-decoder.jar" />
	<pathelement location="${scala.home}/lib/scala-dbc.jar"     />
	<fileset dir="${lib.dir}" includes="**/*.jar"/>
  </path>


<!--
Always include a clean target to get rid of all the extra files
created by the build process, so you can save storage safely, without
thinking.  Also: sometimes you'll want to do a completely fresh build,
such as when changing to a new version of the JDK.
-->
  <target name="clean" description="Removes previous build">
    <delete quiet="true" verbose="false" >
      <fileset dir="${build.dir}"/>
      <fileset dir="${docs.dir}"/>
	  <fileset dir="${dist.dir}"/>
    </delete>
  </target>

<!--
init is a target that sets things up for the build.  Since we use the
built-in ant function mkdir, it will only make the directory if it
does not already exist.
-->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${docs.dir}"/>
    <mkdir dir="${dist.dir}"/>

    <path id="build.classpath">
      <pathelement location="${scala-library.jar}"/>
      <path refid="library.classpath"/>
      <pathelement location="${build.dir}"/>
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala.home}/lib/scala-compiler.jar"/>
        <pathelement location="${scala-library.jar}"/>
      </classpath>
    </taskdef>
  </target>

<!-- 
Build all Java source files into destdir.  This is common in Java
projects: the compile target is trivial, since it just says to build
everything.  Fancier compiler targets are easy if you want to build
just one file at a time.
 -->

	 <target name="compile-java" depends="init">
	     <javac srcdir="${src.dir}" 
	            destdir="${build.dir}"
	            debug="${compile.debug}"
	            source="1.5">
	        <classpath refid="library.classpath"/>
	     </javac>
	 </target>

    <target name="compile" depends="compile-java">
	 	<fsc srcdir="${src.dir}"
	            destdir="${build.dir}"
	            classpathref="build.classpath"
	            force="changed" deprecation="yes">
	      <include name="${src.includes}"/>
	      <exclude name="${src.excludes}"/>
	    </fsc>	
    </target>

  <target name="server" depends="compile">
    <java fork="true" classname="${server.class}" classpathref="build.classpath">
		<jvmarg value="-Dfile.encoding=utf-8" />
		<jvmarg value="-Djava.library.path=${library.path}" />
		<classpath refid="library.classpath"/>
    </java>
  </target>
  <target name="client" depends="compile">
    <java fork="true" classname="${client.class}" classpathref="build.classpath">
		<jvmarg value="-Dfile.encoding=utf-8" />
		<jvmarg value="-Djava.library.path=${library.path}" />
		<classpath refid="library.classpath"/>
		<arg line="${args}"/>
    </java>
  </target>
  <target name="ns" depends="compile">
    <java fork="true" classname="${ns.class}" classpathref="build.classpath">
		<jvmarg value="-Dfile.encoding=utf-8" />
		<jvmarg value="-Djava.library.path=${library.path}" />
		<classpath refid="library.classpath"/>
    </java>
  </target>

  <target name="docs" depends="init">
    <mkdir dir="${docs.dir}"/>
    <scaladoc
      srcdir="${src.dir}"
      destdir="${docs.dir}"
      deprecation="yes" unchecked="yes"
      windowtitle="${project.name} API Documentation"
      doctitle="&lt;div&gt;${project.name} ${project.version}&lt;/div&gt;"
      classpathref="build.classpath">
      <include name="${src.includes}"/>
      <exclude name="${src.excludes}"/>
    </scaladoc>
  </target>
	
  <target name="dist" depends="clean,compile">
		<jar jarfile="${dist.dir}/${project.name}-server.jar" basedir="${build.dir}">
			<zipfileset dir="${build.dir}" prefix="" />
			<zipfileset src="${scala-library.jar}" />
			<manifest>
				<attribute name="Main-Class" value="${server.class}"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Vendor" value="${user.name}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
		    </manifest>
		</jar>
		<jar jarfile="${dist.dir}/${project.name}-client.jar" basedir="${build.dir}">
			<zipfileset dir="${build.dir}" prefix="" />
			<zipfileset src="${scala-library.jar}" />
			<manifest>
				<attribute name="Main-Class" value="${client.class}"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Vendor" value="${user.name}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
		    </manifest>
		</jar>
		<jar jarfile="${dist.dir}/${project.name}-ns.jar" basedir="${build.dir}">
			<zipfileset dir="${build.dir}" prefix="" />
			<zipfileset src="${scala-library.jar}" />
			<zipfileset src="${sqlite.jar}" />
			<manifest>
				<attribute name="Main-Class" value="${ns.class}"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Vendor" value="${user.name}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
		    </manifest>
		</jar>		
		<!-- <jar jarfile="${dist.dir}/${project.name}-${project.version}.doc.jar" basedir="${docs.dir}"/>		-->
  </target>

</project>

